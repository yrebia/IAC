name: Deploy Dev Environment

on:
  push:
    branches: [dev]
    tags: ['v*.*.*']
  pull_request:
    branches: [dev]

concurrency:
  group: terraform-dev
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: eu-west-3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend-config=backends/dev.config -no-color

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Auto-Import Namespace (idempotent)
        env:
          TF_IN_AUTOMATION: "1"
        run: |
          set -euo pipefail
          if ! terraform state list | grep -q '^kubernetes_namespace\.app$'; then
            echo "Namespace 'app' pas encore dans le state: tentative d'import…"
            terraform import \
              -var-file=dev.tfvars \
              -input=false \
              -lock-timeout=5m \
              kubernetes_namespace.app app \
              || echo "Import non effectué (namespace absent) : il sera créé par terraform apply."
          else
            echo "Namespace 'app' déjà suivi par Terraform: rien à faire."
          fi

      - name: Terraform Plan
        run: terraform plan -var-file=dev.tfvars -lock-timeout=5m -no-color

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        run: terraform apply -var-file=dev.tfvars -auto-approve -lock-timeout=5m -no-color
