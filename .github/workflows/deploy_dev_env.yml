name: Deploy Dev Environment

on:
  push:
    branches: [dev]
    tags: ['v*.*.*']
  pull_request:
    branches: [dev]

concurrency:
  group: terraform-dev
  cancel-in-progress: false

jobs:
  terraform-dev:
    runs-on: ubuntu-latest
    environment: dev

    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: infra

    steps:
      # 🧩 1. Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🧩 2. Auth AWS via OIDC (GitHub Identity Federation)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: eu-west-2

      # 🧩 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      # 🧩 4. Validation du code Terraform
      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend-config=backends/dev.config -no-color

      - name: Terraform Validate
        run: terraform validate -no-color

      # 🧩 5. Terraform Plan (pour revue)
      - name: Terraform Plan (dev)
        id: plan
        run: terraform plan -var-file="dev.tfvars" -out=tfplan

      # 🧩 6. Apply - Étape 1 : réseau + DB + EKS
      - name: Terraform Apply (network + EKS + DB)
        run: terraform apply -var-file="dev.tfvars" -auto-approve -input=false tfplan

      # ☸️ Étape 7 : Installer kubectl
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.28.2

      # 🔐 Étape 8 : Configurer kubectl avec EKS
      - name: Configure kubectl with EKS
        run: |
          aws eks update-kubeconfig --region eu-west-2 --name team14-dev-dev-cluster

      # 📈 Étape 11 : Déployer le monitoring stack via Helm
      - name: Deploy monitoring stack
        run: |
          cd ../charts/monitoring
          helm dependency build
          helm upgrade --install monitoring-stack . \
            -f values.yaml \
            -n monitoring --create-namespace --wait --timeout 15m