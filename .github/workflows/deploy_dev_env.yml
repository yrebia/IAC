name: Deploy Dev Environment

on:
  push:
    branches: [dev]
    tags: ['v*.*.*']
  pull_request:
    branches: [dev]

concurrency:
  group: terraform-dev
  cancel-in-progress: false

jobs:
  terraform-dev:
    runs-on: ubuntu-latest
    environment: dev

    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: infra

    steps:
      # 🧩 1. Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🧩 2. Auth AWS via OIDC (GitHub Identity Federation)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: eu-west-3

      # 🧩 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      # 🧩 4. Validation du code Terraform
      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend-config=backends/dev.config -no-color

      - name: Terraform Validate
        run: terraform validate -no-color

      # 🧩 5. Terraform Plan (pour revue)
      - name: Terraform Plan (dev)
        id: plan
        run: |
          set -euo pipefail
          terraform plan \
            -var-file="dev.tfvars" \
            -var="enable_permissions=false" \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -no-color || exit_code=$?

          # Terraform renvoie 2 quand il y a des changements → on l'autorise
          if [ "${exit_code:-0}" -gt 1 ]; then
            echo "❌ Terraform plan failed with code $exit_code"
            exit $exit_code
          else
            echo "✅ Terraform plan completed successfully (exit $exit_code)"
          fi

      # 🧩 6. Apply - Étape 1 : réseau + DB + EKS
      - name: Terraform Apply (network + EKS + DB)
        run: |
          set -euo pipefail
          terraform apply \
            -target=module.network \
            -target=module.database \
            -target=module.eks \
            -var-file="dev.tfvars" \
            -var="enable_permissions=false" \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -auto-approve -no-color

      # 🧩 7. Attendre que le cluster EKS devienne actif
      - name: Wait for EKS cluster to become ACTIVE
        run: |
          set -euo pipefail
          echo "⏳ Waiting for EKS cluster to be ACTIVE..."
          for i in {1..20}; do
            STATUS=$(aws eks describe-cluster --name tmgr-eks --region eu-west-3 --query "cluster.status" --output text 2>/dev/null || echo "MISSING")
            echo "Cluster status: $STATUS"
            if [ "$STATUS" = "ACTIVE" ]; then
              echo "✅ Cluster is ACTIVE!"
              break
            fi
            sleep 15
          done
          if [ "$STATUS" != "ACTIVE" ]; then
            echo "❌ Cluster not active after waiting period"
            exit 1
          fi

      # 🧩 8. Apply - Étape 2 : Helm, namespaces, manifests, etc.
      - name: Terraform Apply (remaining modules)
        run: |
          set -euo pipefail
          for i in {1..3}; do
            echo "🚀 Running Terraform apply (attempt $i)..."
            terraform apply \
              -var-file="dev.tfvars" \
              -var="enable_permissions=false" \
              -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
              -auto-approve -no-color | tee terraform.log && break

            status=$?
            if grep -q "Error acquiring the state lock" terraform.log; then
              echo "🔒 State lock detected, retrying in 30s..."
              sleep 30
            else
              echo "❌ Terraform apply failed (code $status)"
              exit $status
            fi
          done

      # 🧩 9. Vérification de la connectivité cluster
      - name: Verify EKS connection
        run: |
          set -euo pipefail
          echo "🔍 Checking Kubernetes connectivity..."
          aws eks update-kubeconfig --name tmgr-eks --region eu-west-3
          kubectl get nodes -o wide
          kubectl get ns

      # 🧩 10. Outputs Terraform lisibles
      - name: Show Terraform Outputs
        run: |
          set -euo pipefail
          terraform output -json | jq .
