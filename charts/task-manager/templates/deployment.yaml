apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "task-manager.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "task-manager.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "task-manager.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "task-manager.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "task-manager.serviceAccountName" . }}
      nodeSelector: {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- with .Values.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.targetPort }}
          readinessProbe:
            httpGet: { path: "/", port: {{ .Values.service.targetPort }} }
            initialDelaySeconds: 5
          livenessProbe:
            httpGet: { path: "/", port: {{ .Values.service.targetPort }} }
            initialDelaySeconds: 10
            periodSeconds: 15
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

          # ---- C6 : injection des variables DB depuis le Secret K8s ----
          {{- if .Values.db.enabled }}
          envFrom:
            - secretRef:
                name: {{ .Values.db.secretName }}
          {{- if not .Values.db.useDatabaseUrl }}
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secretName }}
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secretName }}
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secretName }}
                  key: DB_NAME
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secretName }}
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secretName }}
                  key: DB_PASSWORD
          {{- end }}
          {{- end }}

          volumeMounts:
            - name: run
              mountPath: /var/run
            - name: cache
              mountPath: /var/cache/nginx
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: run
          emptyDir: {}
        - name: cache
          emptyDir: {}
        - name: tmp
          emptyDir: {}
